/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.dev_17thjan.livelistdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dev_17thjan.livelistdb.MockData;

/**
 * Service object for domain model class {@link MockData}.
 */
public interface MockDataService {

    /**
     * Creates a new MockData. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MockData if any.
     *
     * @param mockData Details of the MockData to be created; value cannot be null.
     * @return The newly created MockData.
     */
	MockData create(MockData mockData);


	/**
	 * Returns MockData by given id if exists.
	 *
	 * @param mockdataId The id of the MockData to get; value cannot be null.
	 * @return MockData associated with the given mockdataId.
     * @throws EntityNotFoundException If no MockData is found.
	 */
	MockData getById(Integer mockdataId) throws EntityNotFoundException;

    /**
	 * Find and return the MockData by given id if exists, returns null otherwise.
	 *
	 * @param mockdataId The id of the MockData to get; value cannot be null.
	 * @return MockData associated with the given mockdataId.
	 */
	MockData findById(Integer mockdataId);


	/**
	 * Updates the details of an existing MockData. It replaces all fields of the existing MockData with the given mockData.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on MockData if any.
     *
	 * @param mockData The details of the MockData to be updated; value cannot be null.
	 * @return The updated MockData.
	 * @throws EntityNotFoundException if no MockData is found with given input.
	 */
	MockData update(MockData mockData) throws EntityNotFoundException;

    /**
	 * Deletes an existing MockData with the given id.
	 *
	 * @param mockdataId The id of the MockData to be deleted; value cannot be null.
	 * @return The deleted MockData.
	 * @throws EntityNotFoundException if no MockData found with the given id.
	 */
	MockData delete(Integer mockdataId) throws EntityNotFoundException;

	/**
	 * Find all MockDatas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MockDatas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<MockData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all MockDatas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MockDatas.
     *
     * @see Pageable
     * @see Page
	 */
    Page<MockData> findAll(String query, Pageable pageable);

    /**
	 * Exports all MockDatas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the MockDatas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the MockData.
	 */
	long count(String query);


}

