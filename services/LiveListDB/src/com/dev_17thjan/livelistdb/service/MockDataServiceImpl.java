/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.dev_17thjan.livelistdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.dev_17thjan.livelistdb.MockData;


/**
 * ServiceImpl object for domain model class MockData.
 *
 * @see MockData
 */
@Service("LiveListDB.MockDataService")
public class MockDataServiceImpl implements MockDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MockDataServiceImpl.class);


    @Autowired
    @Qualifier("LiveListDB.MockDataDao")
    private WMGenericDao<MockData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MockData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LiveListDBTransactionManager")
    @Override
	public MockData create(MockData mockData) {
        LOGGER.debug("Creating a new MockData with information: {}", mockData);
        MockData mockDataCreated = this.wmGenericDao.create(mockData);
        return mockDataCreated;
    }

	@Transactional(readOnly = true, value = "LiveListDBTransactionManager")
	@Override
	public MockData getById(Integer mockdataId) throws EntityNotFoundException {
        LOGGER.debug("Finding MockData by id: {}", mockdataId);
        MockData mockData = this.wmGenericDao.findById(mockdataId);
        if (mockData == null){
            LOGGER.debug("No MockData found with id: {}", mockdataId);
            throw new EntityNotFoundException(String.valueOf(mockdataId));
        }
        return mockData;
    }

    @Transactional(readOnly = true, value = "LiveListDBTransactionManager")
	@Override
	public MockData findById(Integer mockdataId) {
        LOGGER.debug("Finding MockData by id: {}", mockdataId);
        return this.wmGenericDao.findById(mockdataId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LiveListDBTransactionManager")
	@Override
	public MockData update(MockData mockData) throws EntityNotFoundException {
        LOGGER.debug("Updating MockData with information: {}", mockData);
        this.wmGenericDao.update(mockData);

        Integer mockdataId = mockData.getId();

        return this.wmGenericDao.findById(mockdataId);
    }

    @Transactional(value = "LiveListDBTransactionManager")
	@Override
	public MockData delete(Integer mockdataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting MockData with id: {}", mockdataId);
        MockData deleted = this.wmGenericDao.findById(mockdataId);
        if (deleted == null) {
            LOGGER.debug("No MockData found with id: {}", mockdataId);
            throw new EntityNotFoundException(String.valueOf(mockdataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LiveListDBTransactionManager")
	@Override
	public Page<MockData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MockDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LiveListDBTransactionManager")
    @Override
    public Page<MockData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MockDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LiveListDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LiveListDB for table MockData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LiveListDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

