/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.dev_17thjan.livelistdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.dev_17thjan.livelistdb.MockData;
import com.dev_17thjan.livelistdb.service.MockDataService;

/**
 * Controller object for domain model class MockData.
 * @see MockData
 */
@RestController("LiveListDB.MockDataController")
@Api(value = "MockDataController", description = "Exposes APIs to work with MockData resource.")
@RequestMapping("/LiveListDB/MockData")
public class MockDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MockDataController.class);

    @Autowired
    @Qualifier("LiveListDB.MockDataService")
    private MockDataService mockDataService;

    @ApiOperation(value = "Creates a new MockData instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MockData createMockData(@RequestBody MockData mockData) {
        LOGGER.debug("Create MockData with information: {}", mockData);
        mockData = mockDataService.create(mockData);
        LOGGER.debug("Created MockData with information: {}", mockData);
        return mockData;
    }

    @ApiOperation(value = "Returns the MockData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MockData getMockData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting MockData with id: {}", id);
        MockData foundMockData = mockDataService.getById(id);
        LOGGER.debug("MockData details with id: {}", foundMockData);
        return foundMockData;
    }

    @ApiOperation(value = "Updates the MockData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MockData editMockData(@PathVariable("id") Integer id, @RequestBody MockData mockData) throws EntityNotFoundException {
        LOGGER.debug("Editing MockData with id: {}", mockData.getId());
        mockData.setId(id);
        mockData = mockDataService.update(mockData);
        LOGGER.debug("MockData details with id: {}", mockData);
        return mockData;
    }

    @ApiOperation(value = "Deletes the MockData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMockData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting MockData with id: {}", id);
        MockData deletedMockData = mockDataService.delete(id);
        return deletedMockData != null;
    }

    /**
     * @deprecated Use {@link #findMockDatas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MockData instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MockData> searchMockDatasByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MockDatas list");
        return mockDataService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of MockData instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MockData> findMockDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MockDatas list");
        return mockDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMockDatas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return mockDataService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of MockData instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countMockDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting MockDatas");
        return mockDataService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MockDataService instance
	 */
    protected void setMockDataService(MockDataService service) {
        this.mockDataService = service;
    }
}
